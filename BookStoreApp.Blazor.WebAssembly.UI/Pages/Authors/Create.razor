@page "/authors/create"
@inject IAuthorService authorService
@inject NavigationManager navManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Create Author</h3>
<EditForm Model="Author" OnValidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText class="form-control" @bind-Value="Author.FirstName" id="firstName"/>
        <ValidationMessage For="@(() => Author.FirstName)" />
    </div>

    <br />

    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText class="form-control" @bind-Value="Author.LastName" id="lastName" />
        <ValidationMessage For="@(() => Author.LastName)" />
    </div>
     <br />

    <div class="form-group">
        <label for="bio">Biography</label>
        <InputText class="form-control" @bind-Value="Author.Bio" id="bio" />
        <ValidationMessage For="@(() => Author.Bio)" />
    </div>
    <br />

    <button type="submit" class="btn btn-warning btn-block">
        <span class="oi oi-pencil"></span>
        Create Author
    </button>

    <button @onclick="BackToList" class="btn btn-secondary btn-block">
        <span class="oi oi-media-skip-backward"></span>
       Back To List
    </button>

</EditForm>


@code {
    private AuthorCreateDto Author = new AuthorCreateDto();

    private async Task HandleCreateAuthor()
    {
        var response = await authorService.Create(Author);
        if(response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors");
    }


}
